cmake_minimum_required(VERSION 3.21)
list(APPEND CMAKE_PREFIX_PATH $CONDA_PREFIX)

project(bitsandbytes LANGUAGES CXX CUDA)

set(CXX_STANDARD_REQUIRED C++14)
set(FILES_CUDA csrc/ops.cu csrc/kernels.cu)
set(FILES_CPP csrc/common.cpp csrc/cpu_ops.cpp csrc/pythonInterface.c)

option(MAKE_CUDA_BUILD "Build using CUDA" ON)
option(NO_CUBLASLT "Don't use CUBLAST" OFF)

set(COMPUTE_CAPABILITY 
        50 52 60 61 70 72
    )

set(CC_KEPLER 35 37)
# Later versions of CUDA support the new architectures
set(CC_CUDA10x 75)

set(CC_CUDA110 75 80)
set(CC_CUDA11x 75 80 86)
set(CC_cublasLt110 75 80)

set(CC_cublasLt111 75 80 86)
set(CC_ADA_HOPPER 89 90)

add_definitions(-DUSE_AVX2 -DUSE_AVX)
if( MAKE_CUDA_BUILD ) 
    if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
        set(CMAKE_CUDA_ARCHITECTURES 75 80 86)
    endif()
   
    if(NOT DEFINED CMAKE_CUDA_STANDARD)
        set(CMAKE_CUDA_STANDARD 11)
        set(CMAKE_CUDA_STANDARD_REQUIRED ON)
    endif()

    set(ADDITIONAL_CUDA_FLAGS "--use_fast_math")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} ${ADDITIONAL_CUDA_FLAGS}")

    add_library(libbitsandbytes_cuda SHARED 
        ${FILES_CPP}
        ${FILES_CUDA}
    )
    set_source_files_properties(${FILES_CPP} PROPERTIES LANGUAGE CXX)
    set_target_properties(libbitsandbytes_cuda PROPERTIES COMPILE_DEFINITIONS "BUILD_CUDA")
    if(NO_CUBLASLT)
        set_target_properties(libbitsandbytes_cuda PROPERTIES COMPILE_DEFINITIONS "BUILD_CUDA;NO_CUBLASLT")
    endif(NO_CUBLASLT)

    
    set_target_properties(libbitsandbytes_cuda PROPERTIES
        POSITION_INDEPENDENT_CODE ON
        CUDA_SEPARABLE_COMPILATION ON
        PREFIX ""
        OUTPUT_NAME "libbitsandbytes_cuda${CMAKE_CUDA_STANDARD}7"
        LINKER_LANGUAGE C 
        WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
#    add_link_options(-Wl,--export-all-symbols)
#    add_link_options( -Wl,--add-stdcall-alias)
    target_include_directories(libbitsandbytes_cuda PRIVATE
        "${PROJECT_SOURCE_DIR}/csrc/"
        "${PROJECT_SOURCE_DIR}/include/"
    )
    target_link_libraries(libbitsandbytes_cuda PRIVATE 
        cudart
        cublas
        cublasLt
        curand
        cusparse
    )
endif(MAKE_CUDA_BUILD)  

add_library(libbitsandbytes_cpu SHARED 
    ${FILES_CPP}
)
set_source_files_properties(${FILES_CPP} PROPERTIES LANGUAGE CXX)
#add_link_options(-Wl,--export-all-symbols)
#add_link_options(-Wl,--add-stdcall-alias)
set_target_properties(libbitsandbytes_cpu PROPERTIES 
    POSITION_INDEPENDENT_CODE ON
    WINDOWS_EXPORT_ALL_SYMBOLS TRUE
    )

target_include_directories(libbitsandbytes_cpu PRIVATE
    "${PROJECT_SOURCE_DIR}/csrc/"
    "${PROJECT_SOURCE_DIR}/include/"
)

    

