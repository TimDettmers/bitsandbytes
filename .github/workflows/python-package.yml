name: Python package

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        arch: [x86_64, aarch64]
        exclude:
          - os: windows-latest # No hosted agent exists for Windows/ARM64
            arch: aarch64
          - os: windows-latest # Remove this item once compiling on Windows
            arch: x86_64
    runs-on: ${{ matrix.os }}
    steps:
      # Check out code
    - uses: actions/checkout@v3
      # Install Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      # Install Python dependencies
    - run: |
        pip install --upgrade pip
        pip install -r requirements.txt
      # Compile C++ code
    - name: Build C++ CPU
      run: |
        make cpuonly
    - name: Build C++ CUDA
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        image=nvidia/cuda:12.1.0-devel-ubuntu20.04
        echo "Using image $image"
        docker run --user $(id -u) -i -w /src -v $PWD:/src $image make cuda
    - name: Test
      run: |
        PYTHONPATH=. pytest --log-cli-level=DEBUG tests
    - name: Build wheel
      run: |
        python setup.py bdist_wheel
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: bdist_wheel
        path: dist/bitsandbytes-*.whl
        retention-days: 7
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build dist
      run: |
        python setup.py sdist
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: bdist_wheel
        path: dist/
    - run: |
        ls -lR dist/
    - name: Publish to PyPi
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.pypi }}